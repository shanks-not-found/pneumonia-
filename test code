import numpy as np

class DenseLayer:
    def __init__(self, input_size, output_size):
        
        self.weights = np.random.randn(input_size, output_size) * 0.01  
        self.biases = np.zeros((1, output_size)) 
        self.input = None
        self.output = None

    def forward(self, input):
        
        self.input = input
        
       
        self.output = np.dot(input, self.weights) + self.biases
        return self.output

    def backward(self, output_gradient, learning_rate):
        
        weights_gradient = np.dot(self.input.T, output_gradient)
        biases_gradient = np.sum(output_gradient, axis=0, keepdims=True)
        input_gradient = np.dot(output_gradient, self.weights.T)

      
        self.weights -= learning_rate * weights_gradient
        self.biases -= learning_rate * biases_gradient

        
        return input_gradient


np.random.seed(42)  


layer = DenseLayer(3, 2)


input_data = np.array([[1.0, 2.0, 3.0], 
                       [4.0, 5.0, 6.0]])


output = layer.forward(input_data)
print("Forward Output:")
print(output)


output_gradient = np.array([[1.0, 1.0], 
                            [1.0, 1.0]])


input_gradient = layer.backward(output_gradient, learning_rate=0.01)
print("\nInput Gradient:")
print(input_gradient)



